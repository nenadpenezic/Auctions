// <auto-generated />
using System;
using DataLayer.DatabaseConfiguration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(AuctionsDBContext))]
    [Migration("20220818172504_ColumnLengthCorrection")]
    partial class ColumnLengthCorrection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsAccountVerifyed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("VerificationString")
                        .IsRequired()
                        .HasColumnType("varchar(210)");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataLayer.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("DataLayer.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("CurrencyID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DataLayer.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcceptedOfferID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsItemBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ItemID");

                    b.HasIndex("AcceptedOfferID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DataLayer.Models.ItemPhoto", b =>
                {
                    b.Property<int>("ItemPhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ItemPhotoID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemPhotos");
                });

            modelBuilder.Entity("DataLayer.Models.ItemSpecification", b =>
                {
                    b.Property<int>("ItemSpecificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("SpecificationName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SpecificationValue")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ItemSpecificationID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemSpecifications");
                });

            modelBuilder.Entity("DataLayer.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArriveDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Open")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataLayer.Models.Offer", b =>
                {
                    b.Property<int>("OfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<bool>("isAccepted")
                        .HasColumnType("bit");

                    b.HasKey("OfferID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UserID");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("DataLayer.Models.Report", b =>
                {
                    b.Property<int>("UserReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("ReportAgainstUserID")
                        .HasColumnType("int");

                    b.Property<string>("ReportDetails")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReportTitle")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UserReporterID")
                        .HasColumnType("int");

                    b.HasKey("UserReportID");

                    b.HasIndex("ReportAgainstUserID");

                    b.HasIndex("UserReporterID");

                    b.ToTable("UserReports");
                });

            modelBuilder.Entity("DataLayer.Models.Review", b =>
                {
                    b.Property<int>("UserReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("ReviewerID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserReviewID");

                    b.HasIndex("ReviewerID");

                    b.HasIndex("UserID");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("DataLayer.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoldeName")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("EmailForContact")
                        .IsRequired()
                        .HasColumnType("varchar(35)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime?>("LastTimeOnline")
                        .IsRequired()
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("varchar(150)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Models.Account", b =>
                {
                    b.HasOne("DataLayer.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.Models.Item", b =>
                {
                    b.HasOne("DataLayer.Models.Offer", "AcceptedOffer")
                        .WithMany()
                        .HasForeignKey("AcceptedOfferID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataLayer.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcceptedOffer");

                    b.Navigation("Category");

                    b.Navigation("Currency");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.ItemPhoto", b =>
                {
                    b.HasOne("DataLayer.Models.Item", "Item")
                        .WithMany("ItemPhotos")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataLayer.Models.ItemSpecification", b =>
                {
                    b.HasOne("DataLayer.Models.Item", "Item")
                        .WithMany("ItemSpecifications")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataLayer.Models.Notification", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.Offer", b =>
                {
                    b.HasOne("DataLayer.Models.Item", "Item")
                        .WithMany("Offers")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.Report", b =>
                {
                    b.HasOne("DataLayer.Models.User", "ReportAgainstUser")
                        .WithMany()
                        .HasForeignKey("ReportAgainstUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "UserReporter")
                        .WithMany()
                        .HasForeignKey("UserReporterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportAgainstUser");

                    b.Navigation("UserReporter");
                });

            modelBuilder.Entity("DataLayer.Models.Review", b =>
                {
                    b.HasOne("DataLayer.Models.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("UserPersonalReviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Account", "Account")
                        .WithOne()
                        .HasForeignKey("DataLayer.Models.User", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataLayer.Models.Item", b =>
                {
                    b.Navigation("ItemPhotos");

                    b.Navigation("ItemSpecifications");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Notifications");

                    b.Navigation("UserPersonalReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
